{"version":3,"sources":["services/blogs.js","components/Blog.js","components/Notification.js","components/Togglable.js","components/BlogForm.js","services/login.js","hooks/index.js","App.js","index.js"],"names":["token","axios","get","then","response","data","newObject","a","async","config","headers","Authorization","post","newToken","id","put","delete","Blog","blog","getBloglist","showNotification","user","useState","full","setFull","hideWhenFull","display","showWhenFull","toggleDetails","style","paddingTop","paddingLeft","border","borderWidth","marginBottom","className","onClick","title","author","href","url","likes","event","preventDefault","updatedBlog","blogService","name","username","window","confirm","Notification","message","type","Togglable","React","forwardRef","props","ref","visible","setVisible","hideWhenVisible","showWhenVisible","toggleVisibility","useImperativeHandle","buttonLabel","children","displayName","BlogForm","addBlog","newTitleField","newAuthorField","newUrlField","onSubmit","omitreset","credentials","useField","value","setValue","onChange","target","reset","App","blogs","setBlogs","notification","setNotification","setUser","usernameField","passwordField","useEffect","loggedUserJSON","localStorage","getItem","JSON","parse","setTimeout","blogFormRef","createRef","newTitle","newAuthor","newUrl","password","loginService","setItem","stringify","removeItem","exception","sort","b","map","key","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c4c6bd59.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/blogs'\n\nlet token = null\n\nconst setToken = newToken => {\n  token = `bearer ${newToken}`\n}\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = async newObject => {\n  const config = {\n    headers: { Authorization: token }\n  }\n\n  const response = await axios.post(baseUrl, newObject, config)\n  return response.data\n}\n\nconst update = async (id, newObject) => {\n  const config = {\n    headers: { Authorization: token }\n  }\n\n  const response = await axios.put(`${baseUrl}/${id}`, newObject, config)\n  return response.data\n}\n\nconst remove = async id => {\n  const config = {\n    headers: { Authorization: token }\n  }\n\n  const response = await axios.delete(`${baseUrl}/${id}`, config)\n  return response.data\n}\n\nexport default { getAll, create, setToken, update, remove }","import React, { useState } from 'react'\nimport blogService from '../services/blogs'\nimport PropTypes from 'prop-types'\n\nconst Blog = ({ blog, getBloglist, showNotification, user }) => {\n  const [full, setFull] = useState(false)\n\n  const likeBlog = (event) => {\n    event.preventDefault()\n\n    const updatedBlog = {\n      likes: blog.likes+1\n    }\n\n    blogService\n      .update(blog.id, updatedBlog)\n      .then(getBloglist())\n  }\n\n  const deleteBlog = async () => {\n    if (window.confirm(`Do you really want to remove \"${blog.title}\" by ${blog.author}?`)) {\n      await blogService.remove(blog.id)\n      getBloglist()\n      showNotification(`Blog \"${blog.title}\" by ${blog.author} was removed successfully!`, 'success')\n    }\n  }\n\n  const blogStyle = {\n    paddingTop: 10,\n    paddingLeft: 2,\n    border: 'solid',\n    borderWidth: 1,\n    marginBottom: 5\n  }\n\n  const hideWhenFull = { display: full ? 'none' : '' }\n  const showWhenFull = { display: full ? '' : 'none' }\n\n  const toggleDetails = () => {\n    setFull(!full)\n  }\n\n  return (\n    <div style={blogStyle} className=\"blog\">\n      <div style={hideWhenFull} onClick={toggleDetails} className=\"blogBasic\">\n      &quot;{blog.title}&quot; by {blog.author}\n      </div>\n      <div style={showWhenFull} className=\"blogDetails\">\n        <div onClick={toggleDetails}>&quot;{blog.title}&quot; by {blog.author}</div>\n        <div><a href=\"{blog.url}\">{blog.url}</a></div>\n        <div>{blog.likes} {blog.likes === 1 ? 'like' : 'likes'} <button onClick={likeBlog}>like</button></div>\n        <div>added by {blog.user.name}</div>\n        <div>{(user.username === blog.user.username) && <button onClick={deleteBlog}>remove</button>}</div>\n      </div>\n    </div>\n  )\n}\n\nBlog.propTypes = {\n  blog: PropTypes.object.isRequired,\n  getBloglist: PropTypes.func.isRequired,\n  showNotification: PropTypes.func.isRequired,\n  user: PropTypes.object\n}\n\nexport default Blog","import React from 'react'\n\nconst Notification = ({ message, type }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className={type}>\n      {message}\n    </div>\n  )\n}\n\nexport default Notification","import React, { useState, useImperativeHandle } from 'react'\nimport PropTypes from 'prop-types'\n\nconst Togglable = React.forwardRef((props, ref) => {\n  const [visible, setVisible] = useState(false)\n\n  const hideWhenVisible = { display: visible ? 'none' : '' }\n  const showWhenVisible = { display: visible ? '' : 'none' }\n\n  const toggleVisibility = () => {\n    setVisible(!visible)\n  }\n\n  useImperativeHandle(ref, () => {\n    return {\n      toggleVisibility\n    }\n  })\n\n  return (\n    <div>\n      <div style={hideWhenVisible}>\n        <button onClick={toggleVisibility}>{props.buttonLabel}</button>\n      </div>\n      <div style={showWhenVisible}>\n        {props.children}\n        <button onClick={toggleVisibility}>cancel</button>\n      </div>\n    </div>\n  )\n})\n\nTogglable.displayName = 'Togglable'\n\nTogglable.propTypes = {\n  buttonLabel: PropTypes.string.isRequired\n}\n\nexport default Togglable","import React from 'react'\n\nconst BlogForm = ({ addBlog, newTitleField, newAuthorField, newUrlField }) => {\n  return (\n    <div>\n      <h2>Create a new blog</h2>\n\n      <form onSubmit={addBlog}>\n        <div>\n          title:\n          <input {...newTitleField.omitreset} />\n        </div>\n        <div>\n          author:\n          <input {...newAuthorField.omitreset} />\n        </div>\n        <div>\n          url:\n          <input {...newUrlField.omitreset} />\n        </div>\n        <button type=\"submit\">create</button>\n      </form>\n    </div>\n  )\n}\n\nexport default BlogForm","import axios from 'axios'\nconst baseUrl = '/api/login'\n\nconst login = async credentials => {\n  const response = await axios.post(baseUrl, credentials)\n  return response.data\n}\n\nexport default { login }","import { useState } from 'react'\n\nexport const useField = (type) => {\n  const [value, setValue] = useState('')\n\n  const onChange = (event) => {\n    setValue(event.target.value)\n  }\n\n  const reset = () => {\n    setValue('')\n  }\n\n  return {\n    type,\n    value,\n    onChange,\n    reset,\n    omitreset: {\n      type,\n      value,\n      onChange\n    }\n  }\n}","import React, { useState, useEffect } from 'react'\nimport Blog from './components/Blog'\nimport Notification from './components/Notification'\nimport Togglable from './components/Togglable'\nimport BlogForm from './components/BlogForm'\nimport blogService from './services/blogs'\nimport loginService from './services/login'\nimport { useField } from './hooks'\n\nconst App = () => {\n  const [blogs, setBlogs] = useState([])\n  const [notification, setNotification] = useState({ message: null })\n  const [user, setUser] = useState(null)\n\n  const usernameField = useField('text')\n  const passwordField = useField('password')\n  const newTitleField = useField('text')\n  const newAuthorField = useField('text')\n  const newUrlField = useField('text')\n\n  useEffect(() => {\n    getBloglist()\n  }, [])\n\n  useEffect(() => {\n    const loggedUserJSON = window.localStorage.getItem('loggedBloglistappUser')\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON)\n      setUser(user)\n      blogService.setToken(user.token)\n    }\n  }, [])\n\n  const showNotification = (message, type) => {\n    setNotification({ message, type })\n    setTimeout(() => setNotification({ message: null }), 5000)\n  }\n\n  const blogFormRef = React.createRef()\n\n  const blogForm = () => (\n    <Togglable buttonLabel=\"new blog\" ref={blogFormRef}>\n      <BlogForm\n        addBlog={addBlog}\n        newTitleField={newTitleField}\n        newAuthorField={newAuthorField}\n        newUrlField={newUrlField}\n      />\n    </Togglable>\n  )\n\n  const getBloglist = () => {\n    blogService.getAll()\n      .then(blogs =>\n        setBlogs(blogs)\n      )\n  }\n\n  const addBlog = (event) => {\n    event.preventDefault()\n\n    const newTitle = newTitleField.value\n    const newAuthor = newAuthorField.value\n    const newUrl = newUrlField.value\n\n    const blogObject = {\n      title: newTitle,\n      author: newAuthor,\n      url: newUrl,\n      user: user\n    }\n\n    blogService\n      .create(blogObject)\n      .then(() => {\n        getBloglist()\n        showNotification(`A new blog \"${newTitle}\" by ${newAuthor} was added successfully!`, 'success')\n        newTitleField.reset()\n        newAuthorField.reset()\n        newUrlField.reset()\n      })\n  }\n\n  const handleLogin = async (event) => {\n    event.preventDefault()\n    try {\n      const username = usernameField.value\n      const password = passwordField.value\n      const user = await loginService.login({\n        username, password,\n      })\n\n      window.localStorage.setItem(\n        'loggedBloglistappUser', JSON.stringify(user)\n      )\n      setUser(user)\n      showNotification(`Welocme, ${user.name}!`, 'success')\n      usernameField.reset()\n      passwordField.reset()\n    } catch (exception) {\n      showNotification('Wrong username or password!', 'error')\n    }\n  }\n\n  const handleLogout = async (event) => {\n    event.preventDefault()\n    try {\n      window.localStorage.removeItem('loggedBloglistappUser')\n      showNotification(`${user.name} logged out successfully!`, 'success')\n      setUser(null)\n      usernameField.reset()\n      passwordField.reset()\n    } catch (exception) {\n      showNotification('Logout failed!', 'error')\n    }\n  }\n\n  if (user === null) {\n\n    return (\n      <div>\n        <h2>Log in to application</h2>\n        <Notification message={notification.message} type={notification.type} />\n        <form onSubmit={handleLogin}>\n          <div>\n            username\n            <input  {...usernameField.omitreset} />\n          </div>\n          <div>\n            password\n            <input  {...passwordField.omitreset} />\n          </div>\n          <button type=\"submit\">login</button>\n        </form>\n      </div>\n    )\n  }\n\n  return (\n    <div>\n      <h2>Blogs</h2>\n      <Notification message={notification.message} type={notification.type} />\n      <p>{user.name} logged in <button onClick={handleLogout}>logout</button></p>\n      {blogForm()}\n      {blogs.sort(function (a, b){\n        return b.likes - a.likes\n      }).map(blog =>\n        <Blog key={blog.id} blog={blog} getBloglist={getBloglist} showNotification={showNotification} user={user} />\n      )}\n    </div>\n  )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}